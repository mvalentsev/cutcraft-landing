name: Deploy to GitHub Pages

on:
  push:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build
        run: bun run build

      - name: Validate HTML
        run: |
          echo "## 🔍 HTML Validation" >> $GITHUB_STEP_SUMMARY

          # Check for inline styles in HTML files
          if find dist -name "*.html" -exec grep -l "style=" {} + 2>/dev/null | grep -q .; then
            echo "❌ Found inline styles in HTML!" >> $GITHUB_STEP_SUMMARY
            find dist -name "*.html" -exec grep -n "style=" {} + >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Check for .nojekyll file
          if [ ! -f dist/.nojekyll ]; then
            echo "❌ Missing .nojekyll file!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          echo "✅ HTML validation passed" >> $GITHUB_STEP_SUMMARY

      - name: Report build size
        run: |
          echo "## 📦 Build Size Report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -sh dist >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          find dist -name "*.js" -o -name "*.css" | xargs ls -lh | awk '{print $5, $9}' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          # Strict bundle size check (150 KB limit for landing pages)
          DIST_SIZE=$(find dist -type f \( -name "*.js" -o -name "*.css" -o -name "*.html" \) -exec du -b {} + | awk '{sum+=$1} END {print sum}')
          MAX_SIZE=$((150 * 1024)) # 150 KB limit (strict for landing pages)
          if [ $DIST_SIZE -gt $MAX_SIZE ]; then
            echo "❌ Build size exceeds 150 KB limit!" >> $GITHUB_STEP_SUMMARY
            echo "   Current: $(numfmt --to=iec $DIST_SIZE)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "✅ Build size within limits: $(numfmt --to=iec $DIST_SIZE)" >> $GITHUB_STEP_SUMMARY

          # Validate manifest.json and robots.txt
          if [ ! -f dist/manifest.json ]; then
            echo "❌ Missing manifest.json!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          if [ ! -f dist/robots.txt ]; then
            echo "❌ Missing robots.txt!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "✅ PWA manifest and robots.txt validated" >> $GITHUB_STEP_SUMMARY

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy:
    name: Deploy
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Wait for deployment
        run: sleep 45

      - name: Checkout (for Lighthouse config)
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            https://cutcraft.cc
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: ./.lighthouserc.json

      - name: Lighthouse Summary
        if: always()
        run: |
          echo "## 💡 Lighthouse CI" >> $GITHUB_STEP_SUMMARY
          echo "Lighthouse audit completed. Check artifacts for detailed results." >> $GITHUB_STEP_SUMMARY
          echo "Note: Performance tests can be flaky in CI environments." >> $GITHUB_STEP_SUMMARY
